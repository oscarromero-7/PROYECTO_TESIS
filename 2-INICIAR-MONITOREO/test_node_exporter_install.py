#!/usr/bin/env python3
"""
Script de prueba para instalaci√≥n de Node Exporter
Prueba directa de la funcionalidad sin pasar por HTTP
"""

import os
import sys
import urllib.request
import zipfile
import subprocess
import tempfile
from pathlib import Path

def install_node_exporter_direct():
    """Instala Windows Exporter directamente para Windows"""
    try:
        print("üöÄ Iniciando instalaci√≥n de Windows Exporter para Windows...")
        
        # URL del Windows Exporter para Windows
        version = "0.31.3"
        url = f"https://github.com/prometheus-community/windows_exporter/releases/download/v{version}/windows_exporter-{version}-amd64.exe"
        
        print(f"üì• Descargando desde: {url}")
        
        # Crear directorio temporal
        with tempfile.TemporaryDirectory() as temp_dir:
            exe_path_temp = os.path.join(temp_dir, "windows_exporter.exe")
            
            # Descargar archivo
            urllib.request.urlretrieve(url, exe_path_temp)
            print("‚úÖ Descarga completada")
            
            # Crear directorio de destino
            install_dir = "C:\\optimon\\windows_exporter"
            os.makedirs(install_dir, exist_ok=True)
            
            # Copiar ejecutable
            exe_path_final = os.path.join(install_dir, "windows_exporter.exe")
            
            import shutil
            shutil.copy2(exe_path_temp, exe_path_final)
            print(f"‚úÖ Ejecutable instalado en: {exe_path_final}")
            
            # Probar el ejecutable
            result = subprocess.run([exe_path_final, "--version"], 
                                  capture_output=True, text=True, timeout=10)
            
            if result.returncode == 0:
                print(f"‚úÖ Windows Exporter funcional: {result.stdout.strip()}")
                
                # Crear script de inicio
                start_script = os.path.join(install_dir, "start_windows_exporter.bat")
                with open(start_script, 'w') as f:
                    f.write(f'@echo off\n')
                    f.write(f'"{exe_path_final}" --web.listen-address=:9182\n')
                
                print(f"‚úÖ Script de inicio creado: {start_script}")
                print("‚úÖ Para iniciar manualmente: windows_exporter.exe --web.listen-address=:9182")
                print("‚úÖ M√©tricas disponibles en: http://localhost:9182/metrics")
                
                return True
            else:
                print(f"‚ùå Error al probar el ejecutable: {result.stderr}")
                return False
                
    except Exception as e:
        print(f"‚ùå Error en la instalaci√≥n: {e}")
        return False

def check_metrics():
    """Verifica m√©tricas del sistema usando psutil"""
    try:
        import psutil
        print("\nüìä Verificando m√©tricas del sistema...")
        
        # CPU
        cpu_percent = psutil.cpu_percent(interval=1)
        print(f"üñ•Ô∏è CPU: {cpu_percent}%")
        
        # Memoria
        memory = psutil.virtual_memory()
        print(f"üíæ Memoria: {memory.percent}% ({memory.used // 1024**3}GB / {memory.total // 1024**3}GB)")
        
        # Disco
        disk = psutil.disk_usage('C:')
        print(f"üíΩ Disco C:: {disk.percent}% ({disk.used // 1024**3}GB / {disk.total // 1024**3}GB)")
        
        # Procesos
        process_count = len(psutil.pids())
        print(f"‚öôÔ∏è Procesos activos: {process_count}")
        
        print("‚úÖ M√©tricas del sistema obtenidas correctamente")
        return True
        
    except ImportError:
        print("‚ùå psutil no est√° instalado")
        return False
    except Exception as e:
        print(f"‚ùå Error obteniendo m√©tricas: {e}")
        return False

def main():
    print("üîß PRUEBA DE FUNCIONALIDAD - Windows Exporter y M√©tricas")
    print("=" * 60)
    
    # Prueba 1: M√©tricas del sistema
    print("\n1Ô∏è‚É£ PRUEBA: M√©tricas del sistema")
    metrics_ok = check_metrics()
    
    # Prueba 2: Instalaci√≥n de Windows Exporter
    print("\n2Ô∏è‚É£ PRUEBA: Instalaci√≥n de Windows Exporter")
    install_ok = install_node_exporter_direct()
    
    # Resumen
    print("\n" + "=" * 60)
    print("üìã RESUMEN DE PRUEBAS")
    print(f"M√©tricas del sistema: {'‚úÖ OK' if metrics_ok else '‚ùå FALLO'}")
    print(f"Instalaci√≥n Windows Exporter: {'‚úÖ OK' if install_ok else '‚ùå FALLO'}")
    
    if metrics_ok and install_ok:
        print("\nüéâ ¬°TODAS LAS PRUEBAS PASARON EXITOSAMENTE!")
        print("üåê El sistema est√° listo para monitoreo desde el panel web")
    else:
        print("\n‚ö†Ô∏è Algunas pruebas fallaron")
    
    return metrics_ok and install_ok

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)