#!/usr/bin/env python3
"""
Verificador completo del estado del sistema OptiMon
"""

import requests
import subprocess
import socket

def check_port(host, port):
    """Verificar si un puerto est√° abierto"""
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(3)
        result = sock.connect_ex((host, port))
        sock.close()
        return result == 0
    except:
        return False

def check_system_status():
    """Verificar el estado completo del sistema"""
    print("üîç VERIFICACI√ìN COMPLETA DEL SISTEMA OPTIMON")
    print("=" * 50)
    
    # 1. Verificar Dashboard OptiMon
    print("\n1. üìä Dashboard OptiMon (Puerto 5000)")
    if check_port("localhost", 5000):
        try:
            response = requests.get("http://localhost:5000/api/health", timeout=5)
            if response.status_code == 200:
                print("   ‚úÖ Dashboard ejecut√°ndose correctamente")
            else:
                print(f"   ‚ö†Ô∏è  Dashboard responde pero con error: {response.status_code}")
        except:
            print("   ‚ùå Dashboard no responde a API")
    else:
        print("   ‚ùå Dashboard no est√° ejecut√°ndose")
    
    # 2. Verificar Windows Exporter
    print("\n2. üñ•Ô∏è  Windows Exporter (Puerto 9182)")
    if check_port("localhost", 9182):
        try:
            response = requests.get("http://localhost:5000/api/local/windows-exporter/status", timeout=5)
            if response.status_code == 200:
                status = response.json()
                print(f"   ‚úÖ Windows Exporter funcionando")
                print(f"   üìä M√©tricas disponibles: {status.get('metrics_count', 'N/A')}")
                print(f"   üîß Versi√≥n: {status.get('version', 'N/A')}")
            else:
                print("   ‚ö†Ô∏è  Windows Exporter detectado pero API no responde")
        except:
            print("   ‚ö†Ô∏è  Windows Exporter en puerto pero no verificable v√≠a API")
    else:
        print("   ‚ùå Windows Exporter no est√° ejecut√°ndose")
    
    # 3. Verificar Prometheus
    print("\n3. üìà Prometheus (Puerto 9090)")
    if check_port("localhost", 9090):
        try:
            response = requests.get("http://localhost:9090/-/healthy", timeout=5)
            if response.status_code == 200:
                print("   ‚úÖ Prometheus ejecut√°ndose correctamente")
            else:
                print("   ‚ö†Ô∏è  Prometheus responde pero con problemas")
        except:
            print("   ‚ö†Ô∏è  Prometheus en puerto pero no responde a health check")
    else:
        print("   ‚ùå Prometheus no est√° ejecut√°ndose")
    
    # 4. Verificar Grafana
    print("\n4. üìä Grafana (Puerto 3000)")
    if check_port("localhost", 3000):
        try:
            response = requests.get("http://localhost:3000/api/health", timeout=5)
            if response.status_code == 200:
                print("   ‚úÖ Grafana ejecut√°ndose correctamente")
                
                # Verificar dashboards ocultos
                try:
                    dash_response = requests.get("http://localhost:3000/api/search", 
                                               auth=('admin', 'admin'), timeout=5)
                    if dash_response.status_code == 200:
                        dashboards = dash_response.json()
                        hidden_dashboards = [d for d in dashboards if d.get('title', '').startswith('[HIDDEN]')]
                        visible_optimon = [d for d in dashboards if 'optimon' in d.get('title', '').lower() and not d.get('title', '').startswith('[HIDDEN]')]
                        
                        print(f"   üîí Dashboards ocultos: {len(hidden_dashboards)}")
                        print(f"   üëÅÔ∏è  Dashboards OptiMon visibles: {len(visible_optimon)}")
                except:
                    print("   ‚ö†Ô∏è  No se pudo verificar estado de dashboards")
            else:
                print("   ‚ö†Ô∏è  Grafana responde pero con problemas")
        except:
            print("   ‚ö†Ô∏è  Grafana en puerto pero no responde completamente")
    else:
        print("   ‚ùå Grafana no est√° ejecut√°ndose")
    
    # 5. Verificar AlertManager
    print("\n5. üö® AlertManager (Puerto 9093)")
    if check_port("localhost", 9093):
        try:
            response = requests.get("http://localhost:9093/-/healthy", timeout=5)
            if response.status_code == 200:
                print("   ‚úÖ AlertManager ejecut√°ndose correctamente")
            else:
                print("   ‚ö†Ô∏è  AlertManager responde pero con problemas")
        except:
            print("   ‚ö†Ô∏è  AlertManager en puerto pero no responde a health check")
    else:
        print("   ‚ùå AlertManager no est√° ejecut√°ndose")
    
    # 6. Verificar SMTP Service
    print("\n6. üìß SMTP Service (Puerto 5555)")
    if check_port("localhost", 5555):
        print("   ‚úÖ SMTP Service ejecut√°ndose")
    else:
        print("   ‚ùå SMTP Service no est√° ejecut√°ndose")
    
    # 7. Verificar credenciales de nube
    print("\n7. ‚òÅÔ∏è  Credenciales de Nube")
    try:
        response = requests.get("http://localhost:5000/api/cloud/credentials", timeout=5)
        if response.status_code == 200:
            creds = response.json()
            print(f"   AWS: {'‚úÖ Configurado' if creds.get('aws_configured') else '‚ùå No configurado'}")
            print(f"   Azure: {'‚úÖ Configurado' if creds.get('azure_configured') else '‚ùå No configurado'}")
            print(f"   GCP: {'üö´ Deshabilitado' if not creds.get('gcp_configured') else '‚ö†Ô∏è Habilitado'}")
        else:
            print("   ‚ö†Ô∏è  No se pudo verificar credenciales")
    except:
        print("   ‚ùå Error verificando credenciales")
    
    print("\n" + "=" * 50)
    print("üéØ VERIFICACI√ìN COMPLETADA")

if __name__ == '__main__':
    check_system_status()