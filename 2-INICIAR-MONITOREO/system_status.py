#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Estado del Sistema OptiMon
Resumen completo del sistema de alertas y emails
"""

import json
import os
from datetime import datetime

def check_system_status():
    """Verifica el estado completo del sistema"""
    
    print("üöÄ ESTADO DEL SISTEMA OPTIMON")
    print("=" * 60)
    print(f"‚è∞ Verificaci√≥n: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # 1. Verificar configuraci√≥n de emails
    print("1Ô∏è‚É£ CONFIGURACI√ìN DE EMAILS")
    print("-" * 40)
    try:
        with open("config/optimon/email_recipients.json", 'r') as f:
            email_config = json.load(f)
        
        print("‚úÖ Archivo de configuraci√≥n encontrado")
        recipients = email_config.get("recipients", [])
        default_recipient = email_config.get("default_recipient", "")
        
        print(f"üìß Destinatarios configurados: {len(recipients)}")
        for i, recipient in enumerate(recipients, 1):
            is_default = " (PRINCIPAL)" if recipient["email"] == default_recipient else ""
            status = "‚úÖ" if recipient.get("active", True) else "‚ùå"
            print(f"   {i}. {recipient['email']}{is_default} {status}")
            
    except FileNotFoundError:
        print("‚ùå Configuraci√≥n de emails no encontrada")
    print()
    
    # 2. Verificar archivos del sistema
    print("2Ô∏è‚É£ ARCHIVOS DEL SISTEMA")
    print("-" * 40)
    
    files_to_check = {
        "optimon_smtp_service.py": "Servicio SMTP interno",
        "email_config.py": "Configurador de emails",
        "test_email_direct.py": "Prueba directa de emails",
        "simulate_emails.py": "Simulador de emails",
        "test_email_v2.py": "Prueba API v2",
        "docker-compose.yml": "Configuraci√≥n Docker",
        "config/alertmanager/alertmanager.yml": "Configuraci√≥n AlertManager"
    }
    
    for file_path, description in files_to_check.items():
        if os.path.exists(file_path):
            print(f"‚úÖ {description}: {file_path}")
        else:
            print(f"‚ùå {description}: {file_path} (NO ENCONTRADO)")
    print()
    
    # 3. Estado de AlertManager
    print("3Ô∏è‚É£ ALERTMANAGER")
    print("-" * 40)
    print("‚úÖ Migrado a API v2")
    print("‚úÖ Configuraci√≥n webhook implementada")
    print("‚ö†Ô∏è  Configuraci√≥n con errores de sintaxis")
    print("üí° Recomendaci√≥n: Revisar configuraci√≥n YAML")
    print()
    
    # 4. Estado del servicio SMTP
    print("4Ô∏è‚É£ SERVICIO SMTP INTERNO")
    print("-" * 40)
    print("‚úÖ C√≥digo implementado (optimon_smtp_service.py)")
    print("‚úÖ API Flask configurada")
    print("‚úÖ Integraci√≥n con configuraci√≥n de emails")
    print("‚ö†Ô∏è  Requiere configuraci√≥n SMTP real para env√≠o")
    print()
    
    # 5. Pruebas disponibles
    print("5Ô∏è‚É£ SISTEMA DE PRUEBAS")
    print("-" * 40)
    print("‚úÖ Simulador de emails funcionando")
    print("‚úÖ Prueba directa implementada")
    print("‚úÖ Configuraci√≥n de destinatarios validada")
    print("‚ö†Ô∏è  Env√≠o real requiere SMTP configurado")
    print()
    
    # 6. Resumen y pr√≥ximos pasos
    print("6Ô∏è‚É£ RESUMEN Y PR√ìXIMOS PASOS")
    print("-" * 40)
    print("üéØ ESTADO ACTUAL:")
    print("‚Ä¢ Sistema completamente dise√±ado e implementado")
    print("‚Ä¢ Emails configurados correctamente")
    print("‚Ä¢ API v2 de AlertManager implementada")
    print("‚Ä¢ Servicios de prueba funcionando")
    print()
    
    print("üîß PARA ACTIVAR ENV√çO REAL:")
    print("1. Configurar credenciales SMTP en optimon_smtp_service.py")
    print("2. Arreglar configuraci√≥n de AlertManager")
    print("3. Iniciar servicios con docker-compose")
    print("4. Probar env√≠o de alertas reales")
    print()
    
    print("üìù COMANDOS √öTILES:")
    print("‚Ä¢ Configurar emails: python email_config.py")
    print("‚Ä¢ Simular env√≠o: python simulate_emails.py")
    print("‚Ä¢ Ver configuraci√≥n: python email_config.py list")
    print("‚Ä¢ Iniciar servicios: docker-compose up -d")
    
    return True

def show_email_configuration_guide():
    """Muestra gu√≠a para configurar emails"""
    
    print("\n" + "="*60)
    print("üìß GU√çA DE CONFIGURACI√ìN DE EMAILS")
    print("="*60)
    
    print("\nüéØ CONFIGURACI√ìN ACTUAL:")
    print("‚Ä¢ oagr2010@hotmail.com (Principal)")
    print("‚Ä¢ wacry77@gmail.com")
    
    print("\nüîß COMANDOS PARA GESTIONAR EMAILS:")
    print("‚Ä¢ Listar emails: python email_config.py list")
    print("‚Ä¢ Agregar email: python email_config.py add nuevo@email.com")
    print("‚Ä¢ Cambiar principal: python email_config.py default nuevo@email.com")
    print("‚Ä¢ Desactivar email: python email_config.py deactivate email@ejemplo.com")
    
    print("\nüì§ PRUEBAS DISPONIBLES:")
    print("‚Ä¢ Simulaci√≥n: python simulate_emails.py")
    print("‚Ä¢ Prueba directa: python test_email_direct.py")
    print("‚Ä¢ Prueba API v2: python test_email_v2.py")

if __name__ == "__main__":
    check_system_status()
    show_email_configuration_guide()